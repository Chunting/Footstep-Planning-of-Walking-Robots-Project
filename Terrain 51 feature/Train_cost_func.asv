clc
close all

%% terrain template
Classifier.WidthNum = 5; % num of different width in terrain template
Classifier.DepthNum = 5; % num of different depth in terrain template
Classifier.FeatureNum = 51; % Every Terrain Template represents a terrain feature
Classifier.TerrainWidth = 11; % size of terrain template
Classifier.TerrainLenth = 11;
Classifier.TerrainTemplate = GenerateTemplate(Classifier.WidthNum, Classifier.DepthNum, 0); % contains 51 templates which are all 11 by 11 matrixes
Classifier.W = zeros(Classifier.FeatureNum, 1); % the weights we are going to learn

%% input training data and the expert gives y value
TrainingData.num = 10; % training sample number
TrainingData.input = zeros(Classifier.TerrainWidth, Classifier.TerrainWidth, TrainingData.num); % input random terrain
TrainingData.y = zeros(TrainingData.num, 1); % 1 = good, -1 = bad, 0 = unclassified
TrainingData.feature = FeatureValue(Classifier, TrainingData); % 51 * (Num of training data)
TrainingData = ExpertSystem(Classifier, TrainingData);

%% l1-regularized Linear Regression

[ans, fval, exitflag, output, lambda, grad, hessian] = fmincon(@criterion, Classifier.W, [], [], [], [], [], [], [], options);

%% use fmincon to do optimzation

% dome, flat ground, swallow hole
% f1 = @(x, y, a, b)( sqrt(- (x./a).^2 - (y./b).^2 + 1)/0.005 );
%     figure
    
% different width
