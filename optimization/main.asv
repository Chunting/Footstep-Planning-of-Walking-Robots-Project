
close all
% clear all

global robot
global xd
global Rd

drc4();

xd = [0.2, -0.5, 1.4676];
Rd = eye(3);

% xd = [1 -1 2];

options = optimset('MaxFunEvals',10000000,'MaxIter',1000);
p0(1:28) = [joint(2:29).angle];
p0(29:31) = joint(1).position_w;
p0(32:35) = [0,0,0,1];


% Set the joint constraints here
for ii = 1:28
    ub(ii,1) = robot.j(ii+1).angle_limits(2);
    lb(ii,1) = robot.j(ii+1).angle_limits(1);
end

%root position
ub(29:31,1) = [1;1;2];
lb(29:31,1) = [-1;-1;0];

%root orientation
lb(32:35,1) = 5*[-1;-1;-1;-1];
ub(32:35,1) = 5*[1;1;1;1];
lb(36) = 0;
ub(36) = 1;
p0(36) = 1;

t_start = tic;

[answer,fval,exitflag]=fmincon(@criterion,p0,[],[],[],[],lb,ub,@constraints,options);
t_end = toc(t_start);
fprintf('Time to solve: %f Seconds\n',t_end);
fprintf('Objective Value: %

% -------- Recover variables from parameters --------- %
    
% set robot's joints to current parameter joint angles
for i = 1:28
    robot.j(i+1).angle = answer(i);
end

% set the robot's base link to the proper world coordinates and
% orientation
robot.j(1).position_w = answer(29:31);
robot.j(1).rotation = q_to_R(answer(32:35));

% perform forward dynamics
[robot, robot_com, robot_mass] = drc_forward_kinematics( robot );

    
figure
draw(robot,xd,robot_com);
title('Final');

